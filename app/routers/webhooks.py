"""
Router obs≈ÇugujƒÖcy GitHub webhooks
"""
import hashlib
import hmac
import json
import structlog
from typing import Dict, Any
from fastapi import APIRouter, Request, HTTPException, status, Depends
from fastapi.responses import JSONResponse

from ..config import settings
from ..models import (
    GitHubPushEvent, 
    GitHubPullRequestEvent, 
    WebhookResponse, 
    EventType
)
from ..services.event_emitter import EventEmitter
from ..services.policy_storage import PolicyStorage

logger = structlog.get_logger()
router = APIRouter()

def verify_github_signature(payload: bytes, signature: str, secret: str) -> bool:
    """
    Weryfikacja sygnatury GitHub webhook
    
    Args:
        payload: Raw payload z GitHub
        signature: Sygnatura z headera X-Hub-Signature-256
        secret: Secret key skonfigurowany w GitHub
    
    Returns:
        bool: True je≈õli sygnatura jest prawid≈Çowa
    """
    if not secret:
        logger.warning("üîê Brak webhook secret - pomijam weryfikacjƒô sygnatury")
        return True
    
    if not signature:
        return False
    
    # GitHub u≈ºywa SHA-256 i prefixu 'sha256='
    if not signature.startswith('sha256='):
        return False
    
    expected_signature = 'sha256=' + hmac.new(
        secret.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(signature, expected_signature)

def get_services(request: Request):
    """Dependency do pobrania serwis√≥w z app state"""
    return {
        'event_emitter': request.app.state.event_emitter,
        'policy_storage': request.app.state.policy_storage
    }

async def process_policy_files(commits: list, event_emitter: EventEmitter, source: str = "github_webhook") -> int:
    """
    Przetw√≥rz pliki policy z commit√≥w
    
    Args:
        commits: Lista commit√≥w z GitHub
        event_emitter: Serwis do emisji event√≥w
        source: ≈πr√≥d≈Ço eventu
    
    Returns:
        int: Liczba przetworzonych plik√≥w policy
    """
    policy_extensions = {'.rego', '.policy', '.pol'}
    processed_count = 0
    
    for commit in commits:
        policy_files = []
        
        # Sprawd≈∫ dodane, zmodyfikowane i usuniƒôte pliki
        all_files = commit.get('added', []) + commit.get('modified', []) + commit.get('removed', [])
        
        for file_path in all_files:
            # Sprawd≈∫ czy to plik policy
            if any(file_path.lower().endswith(ext) for ext in policy_extensions):
                policy_files.append(file_path)
        
        if policy_files:
            logger.info(
                "üìã Znaleziono pliki policy w commit",
                commit_id=commit.get('id', 'unknown')[:8],
                files=policy_files,
                message=commit.get('message', 'No message')
            )
            
            # Emit event dla ka≈ºdego pliku policy
            for policy_file in policy_files:
                try:
                    await event_emitter.emit_policy_update(
                        policy_id=policy_file,
                        policy_name=policy_file.split('/')[-1],  # Tylko nazwa pliku
                        source=source,
                        metadata={
                            'commit_id': commit.get('id'),
                            'commit_message': commit.get('message'),
                            'file_path': policy_file,
                            'author': commit.get('author', {}).get('name', 'unknown')
                        }
                    )
                    processed_count += 1
                except Exception as e:
                    logger.error(
                        "‚ùå B≈ÇƒÖd podczas emisji eventu dla pliku policy",
                        file=policy_file,
                        error=str(e)
                    )
    
    return processed_count

@router.post("/github", response_model=WebhookResponse)
async def github_webhook(
    request: Request, 
    services: Dict = Depends(get_services)
):
    """
    Endpoint obs≈ÇugujƒÖcy GitHub webhooks
    
    Obs≈Çuguje eventy:
    - push: Zmiany w repozytorium (dodanie/modyfikacja/usuniƒôcie plik√≥w policy)
    - pull_request: Pull requesty (mo≈ºe wp≈Çywaƒá na policy)
    """
    event_emitter: EventEmitter = services['event_emitter']
    policy_storage: PolicyStorage = services['policy_storage']
    
    # Pobranie header√≥w
    signature = request.headers.get('X-Hub-Signature-256')
    event_type = request.headers.get('X-GitHub-Event')
    delivery_id = request.headers.get('X-GitHub-Delivery')
    
    logger.info(
        "üì• GitHub webhook otrzymany",
        event_type=event_type,
        delivery_id=delivery_id,
        has_signature=bool(signature)
    )
    
    # Pobranie raw payload
    try:
        payload_bytes = await request.body()
        payload = json.loads(payload_bytes.decode('utf-8'))
    except Exception as e:
        logger.error("‚ùå B≈ÇƒÖd podczas parsowania payload", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid payload format"
        )
    
    # Weryfikacja sygnatury
    if not verify_github_signature(payload_bytes, signature, settings.github_webhook_secret):
        logger.warning("üîí Nieprawid≈Çowa sygnatura webhook", delivery_id=delivery_id)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid webhook signature"
        )
    
    processed_files = 0
    event_processed = False
    
    try:
        if event_type == 'push':
            # Obs≈Çuga push event
            push_event = GitHubPushEvent(**payload)
            
            logger.info(
                "üîÄ Przetwarzanie push event",
                ref=push_event.ref,
                commits_count=len(push_event.commits),
                repository=push_event.repository.get('full_name', 'unknown')
            )
            
            # Przetw√≥rz tylko je≈õli to push do g≈Ç√≥wnej ga≈Çƒôzi
            if push_event.ref in ['refs/heads/main', 'refs/heads/master']:
                processed_files = await process_policy_files(
                    push_event.commits,
                    event_emitter,
                    source="github_push"
                )
                event_processed = True
            else:
                logger.info("‚è≠Ô∏è Ignorowanie push do ga≈Çƒôzi", ref=push_event.ref)
        
        elif event_type == 'pull_request':
            # Obs≈Çuga pull request event
            pr_event = GitHubPullRequestEvent(**payload)
            
            logger.info(
                "üì¨ Przetwarzanie pull request event",
                action=pr_event.action,
                pr_number=pr_event.number,
                repository=pr_event.repository.get('full_name', 'unknown')
            )
            
            # Przetw√≥rz tylko przy merged/closed
            if pr_event.action in ['closed'] and pr_event.pull_request.get('merged', False):
                # W rzeczywistej implementacji mo≈ºna by pobraƒá pliki z PR
                logger.info("‚úÖ PR zosta≈Ç zmergowany - sprawdzanie policy files")
                event_processed = True
            else:
                logger.info("‚è≠Ô∏è Ignorowanie PR action", action=pr_event.action)
        
        else:
            logger.info("‚è≠Ô∏è Nieobs≈Çugiwany typ eventu", event_type=event_type)
        
        # Logowanie wynik√≥w
        if event_processed:
            if processed_files > 0:
                logger.info(
                    "‚úÖ Webhook przetworzony pomy≈õlnie",
                    event_type=event_type,
                    files_processed=processed_files
                )
            else:
                logger.info("‚úÖ Webhook przetworzony - brak plik√≥w policy")
        
        return WebhookResponse(
            processed=event_processed,
            message=f"Processed {event_type} event with {processed_files} policy files",
            event_id=delivery_id
        )
    
    except Exception as e:
        logger.error(
            "‚ùå B≈ÇƒÖd podczas przetwarzania webhook",
            event_type=event_type,
            delivery_id=delivery_id,
            error=str(e)
        )
        
        return WebhookResponse(
            processed=False,
            message=f"Error processing {event_type} event: {str(e)}",
            event_id=delivery_id
        )

@router.get("/github/test")
async def test_github_webhook():
    """Test endpoint dla webhook GitHub"""
    return {
        "status": "ok",
        "message": "GitHub webhook endpoint is ready",
        "webhook_url": f"{settings.github_webhook_path}",
        "signature_verification": bool(settings.github_webhook_secret)
    } 