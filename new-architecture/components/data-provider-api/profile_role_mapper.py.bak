"""
Modu≈Ç do automatycznego mapowania profili aplikacji na role u≈ºytkownik√≥w.
Po przypisaniu profilu aplikacji u≈ºytkownikowi, automatycznie tworzy odpowiadajƒÖce mu role w tabeli user_roles.
"""

import logging
# DAO imports removed - this module uses direct SQL queries
from shared.database.connection import get_db_cursor

logger = logging.getLogger(__name__)

def apply_profile_to_user_roles(user_id, profile_id, app_id, tenant_id):
    """
    Mapuje profil aplikacji na role u≈ºytkownika.
    
    Args:
        user_id (str): ID u≈ºytkownika
        profile_id (str): ID profilu aplikacji
        app_id (str): ID aplikacji
        tenant_id (str): ID tenanta
    
    Returns:
        dict: Wynik operacji z informacjami o utworzonych rolach
    """
    try:
        logger.info(f"üîÑ Rozpoczynam mapowanie profilu {profile_id} dla u≈ºytkownika {user_id} w tenant {tenant_id}")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # 1. Pobierz role przypisane do profilu
            cursor.execute("""
                SELECT pr.role_id, r.role_name, r.app_id
                FROM profile_roles pr
                JOIN roles r ON pr.role_id = r.role_id
                WHERE pr.profile_id = %s AND r.app_id = %s
            """, (profile_id, app_id))
            
            profile_roles = cursor.fetchall()
            
            if not profile_roles:
                logger.warning(f"‚ö†Ô∏è Brak r√≥l zdefiniowanych dla profilu {profile_id} w aplikacji {app_id}")
                return {"success": False, "message": "Brak r√≥l dla profilu", "created_roles": []}
            
            created_roles = []
            skipped_roles = []
            
            # 2. Dla ka≈ºdej roli z profilu, utw√≥rz wpis w user_roles
            for role_id, role_name, role_app_id in profile_roles:
                try:
                    # Sprawd≈∫ czy rola ju≈º istnieje dla u≈ºytkownika
                    cursor.execute("""
                        SELECT COUNT(*) FROM user_roles 
                        WHERE user_id = %s AND role_id = %s AND tenant_id = %s
                    """, (user_id, role_id, tenant_id))
                    
                    exists = cursor.fetchone()[0] > 0
                    
                    if exists:
                        logger.info(f"‚è≠Ô∏è Rola {role_name} ju≈º przypisana do u≈ºytkownika {user_id}")
                        skipped_roles.append({
                            "role_id": role_id,
                            "role_name": role_name,
                            "reason": "already_exists"
                        })
                        continue
                    
                    # Utw√≥rz nowƒÖ rolƒô dla u≈ºytkownika
                    cursor.execute("""
                        INSERT INTO user_roles (user_id, role_id, tenant_id, assigned_at, assigned_by)
                        VALUES (%s, %s, %s, NOW(), 'profile_mapper')
                    """, (user_id, role_id, tenant_id))
                    
                    created_roles.append({
                        "role_id": role_id,
                        "role_name": role_name,
                        "app_id": role_app_id
                    })
                    
                    logger.info(f"‚úÖ Utworzono rolƒô {role_name} dla u≈ºytkownika {user_id}")
                    
                except Exception as role_error:
                    logger.error(f"‚ùå B≈ÇƒÖd tworzenia roli {role_name}: {role_error}")
                    skipped_roles.append({
                        "role_id": role_id,
                        "role_name": role_name,
                        "reason": f"error: {role_error}"
                    })
            
            conn.commit()
            
            logger.info(f"‚úÖ Mapowanie profilu zako≈Ñczone - utworzono {len(created_roles)} r√≥l, pominiƒôto {len(skipped_roles)}")
            
            return {
                "success": True,
                "message": f"Pomy≈õlnie zmapowano profil {profile_id}",
                "created_roles": created_roles,
                "skipped_roles": skipped_roles,
                "profile_id": profile_id,
                "user_id": user_id,
                "tenant_id": tenant_id
            }
    
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd mapowania profilu {profile_id} dla u≈ºytkownika {user_id}: {e}")
        return {
            "success": False,
            "message": f"B≈ÇƒÖd mapowania profilu: {e}",
            "created_roles": [],
            "error": str(e)
        }

def remove_profile_from_user_roles(user_id, profile_id, app_id, tenant_id):
    """
    Usuwa role u≈ºytkownika pochodzƒÖce z profilu aplikacji.
    
    Args:
        user_id (str): ID u≈ºytkownika
        profile_id (str): ID profilu aplikacji
        app_id (str): ID aplikacji
        tenant_id (str): ID tenanta
    
    Returns:
        dict: Wynik operacji z informacjami o usuniƒôtych rolach
    """
    try:
        logger.info(f"üóëÔ∏è Rozpoczynam usuwanie r√≥l z profilu {profile_id} dla u≈ºytkownika {user_id}")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # 1. Pobierz role przypisane do profilu
            cursor.execute("""
                SELECT pr.role_id, r.role_name
                FROM profile_roles pr
                JOIN roles r ON pr.role_id = r.role_id
                WHERE pr.profile_id = %s AND r.app_id = %s
            """, (profile_id, app_id))
            
            profile_roles = cursor.fetchall()
            removed_roles = []
            
            # 2. Usu≈Ñ role u≈ºytkownika pochodzƒÖce z tego profilu
            for role_id, role_name in profile_roles:
                cursor.execute("""
                    DELETE FROM user_roles 
                    WHERE user_id = %s AND role_id = %s AND tenant_id = %s 
                    AND assigned_by = 'profile_mapper'
                """, (user_id, role_id, tenant_id))
                
                if cursor.rowcount > 0:
                    removed_roles.append({
                        "role_id": role_id,
                        "role_name": role_name
                    })
                    logger.info(f"üóëÔ∏è Usuniƒôto rolƒô {role_name} dla u≈ºytkownika {user_id}")
            
            conn.commit()
            
            logger.info(f"‚úÖ Usuwanie r√≥l z profilu zako≈Ñczone - usuniƒôto {len(removed_roles)} r√≥l")
            
            return {
                "success": True,
                "message": f"Pomy≈õlnie usuniƒôto role z profilu {profile_id}",
                "removed_roles": removed_roles,
                "profile_id": profile_id,
                "user_id": user_id,
                "tenant_id": tenant_id
            }
    
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd usuwania r√≥l z profilu {profile_id}: {e}")
        return {
            "success": False,
            "message": f"B≈ÇƒÖd usuwania r√≥l z profilu: {e}",
            "removed_roles": [],
            "error": str(e)
        }

def sync_user_profiles_to_roles(user_id, tenant_id):
    """
    Synchronizuje wszystkie profile u≈ºytkownika z jego rolami.
    Przydatne do naprawy niesp√≥jno≈õci lub migracji danych.
    
    Args:
        user_id (str): ID u≈ºytkownika
        tenant_id (str): ID tenanta
    
    Returns:
        dict: Wynik operacji z podsumowaniem
    """
    try:
        logger.info(f"üîÑ Rozpoczynam pe≈ÇnƒÖ synchronizacjƒô profili dla u≈ºytkownika {user_id}")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # 1. Pobierz wszystkie profile u≈ºytkownika
            cursor.execute("""
                SELECT uap.profile_id, ap.profile_name, ap.app_id
                FROM user_application_profiles uap
                JOIN application_profiles ap ON uap.profile_id = ap.profile_id
                WHERE uap.user_id = %s
            """, (user_id,))
            
            user_profiles = cursor.fetchall()
            
            total_created = 0
            sync_results = []
            
            # 2. Dla ka≈ºdego profilu, zastosuj mapowanie
            for profile_id, profile_name, app_id in user_profiles:
                result = apply_profile_to_user_roles(user_id, profile_id, app_id, tenant_id)
                sync_results.append({
                    "profile_id": profile_id,
                    "profile_name": profile_name,
                    "app_id": app_id,
                    "result": result
                })
                total_created += len(result.get("created_roles", []))
            
            logger.info(f"‚úÖ Synchronizacja zako≈Ñczona - utworzono ≈ÇƒÖcznie {total_created} r√≥l")
            
            return {
                "success": True,
                "message": f"Zsynchronizowano {len(user_profiles)} profili",
                "total_created_roles": total_created,
                "sync_results": sync_results,
                "user_id": user_id,
                "tenant_id": tenant_id
            }
    
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd synchronizacji profili dla u≈ºytkownika {user_id}: {e}")
        return {
            "success": False,
            "message": f"B≈ÇƒÖd synchronizacji: {e}",
            "error": str(e)
        } 