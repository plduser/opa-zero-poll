version: '3.8'

services:
  # Data Provider API - symuluje zewnętrzny system ACL
  data-provider-api:
    build: ./new-architecture/components/data-provider-api
    platform: linux/arm64
    container_name: data-provider-api
    ports:
      - "8110:8110"
    environment:
      - PORT=8110
      - DEBUG=false
      - WEBHOOK_SECRET=twoj_super_tajny_klucz123!@#
      - OPA_URL=http://opa-standalone-new:8181
      - PROVISIONING_API_URL=http://provisioning-api-new:8010
      - DISABLE_JWT_VALIDATION=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8110/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - new-arch-network

  # Provisioning API - zarządzanie tenantami
  provisioning-api:
    build: ./new-architecture/components/provisioning-api
    platform: linux/arm64
    container_name: provisioning-api-new
    ports:
      - "8010:8010"
    environment:
      - PORT=8010
      - DEBUG=false
      - DATABASE_PATH=/app/data/tenants.db
    volumes:
      - provisioning_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - new-arch-network

  # OPA Standalone - autoryzacja z politikami RBAC
  opa-standalone:
    build: ./new-architecture/components/opa-standalone
    platform: linux/arm64
    container_name: opa-standalone-new
    ports:
      - "8181:8181"
    environment:
      - OPA_LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - new-arch-network

  # Redis - broadcast channel dla OPAL Server/Client komunikacji
  redis-broadcast:
    image: redis:7-alpine
    container_name: redis-broadcast
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - new-arch-network

  # OPAL Server - Policy Information Point (PIP)
  opal-server:
    image: permitio/opal-server:latest
    container_name: opal-server
    ports:
      - "7002:7002"  # OPAL Server API
    volumes:
      - ./data-config.json:/data-config.json
    environment:
      # Broadcast channel (Redis)
      - OPAL_BROADCAST_URI=redis://redis-broadcast:6379
      
      # GitHub Policy Repository - WŁĄCZONE z lokalnym repo
      - OPAL_POLICY_REPO_URL=https://github.com/plduser/opa-zero-poll.git
      - OPAL_POLICY_REPO_MAIN_BRANCH=main
      - OPAL_POLICY_REPO_PATH=new-architecture/components/opa-standalone/policies
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      
      # Data Configuration
      - OPAL_DATA_CONFIG_SOURCES_FILE_PATH=/data-config.json
      - OPAL_DATA_CONFIG_ENABLED=true
      - OPAL_ALL_DATA_URL=http://simple-api-provider:8090/full-snapshot
      
      # Server Performance
      - OPAL_LOG_LEVEL=DEBUG
    depends_on:
      - redis-broadcast
      - simple-api-provider
      - provisioning-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7002/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - new-arch-network

  # OPAL Client - Synchronizator (Policy Enforcement Point)
  opal-client:
    image: permitio/opal-client:latest
    container_name: opal-client
    ports:
      - "7001:7000"  # OPAL Client API
    environment:
      # OPAL Server connection
      - OPAL_SERVER_URL=http://opal-server:7002
      - OPAL_FETCH_PROVIDER_ENABLED=true
      - OPAL_INLINE_OPA_ENABLED=false
      
      # Broadcast channel (Redis)
      - OPAL_BROADCAST_URI=redis://redis-broadcast:6379
      
      # OPA connection (External OPA)
      - OPAL_POLICY_STORE_URL=http://opa-standalone-new:8181
      
      # Policy subscription - subskrybuje polityki z OPAL Server
      - OPAL_POLICY_SUBSCRIPTION_DIRS=new-architecture/components/opa-standalone/policies
      
      # Data sources configuration
      - OPAL_DATA_UPDATER_ENABLED=true
      - OPAL_DATA_TOPICS=tenant_1_data,tenant_2_data,tenant_3_data
      
      # Włączenie polityk z GitHub repo
      - OPAL_POLICY_UPDATER_ENABLED=true
      
      # Debug
      - OPAL_LOG_LEVEL=DEBUG
    depends_on:
      - opal-server
      - opa-standalone
      - redis-broadcast
    networks:
      - new-arch-network

  # Simple API Provider - prosty nginx z na sztywno zdefiniowanymi odpowiedziami
  simple-api-provider:
    build: ./simple-api-provider
    platform: linux/arm64
    container_name: simple-api-provider
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - new-arch-network

volumes:
  provisioning_data:
    driver: local
  redis_data:
    driver: local


networks:
  new-arch-network:
    driver: bridge
