"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/users/page",{

/***/ "(app-pages-browser)/./lib/users-api.ts":
/*!**************************!*\
  !*** ./lib/users-api.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignCompanyToUser: () => (/* binding */ assignCompanyToUser),\n/* harmony export */   assignProfileToUser: () => (/* binding */ assignProfileToUser),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   deleteUserApplicationAccess: () => (/* binding */ deleteUserApplicationAccess),\n/* harmony export */   deleteUserCompany: () => (/* binding */ deleteUserCompany),\n/* harmony export */   fetchApplications: () => (/* binding */ fetchApplications),\n/* harmony export */   fetchCompaniesForUsers: () => (/* binding */ fetchCompaniesForUsers),\n/* harmony export */   fetchProfile: () => (/* binding */ fetchProfile),\n/* harmony export */   fetchProfiles: () => (/* binding */ fetchProfiles),\n/* harmony export */   fetchUser: () => (/* binding */ fetchUser),\n/* harmony export */   fetchUserApplicationAccess: () => (/* binding */ fetchUserApplicationAccess),\n/* harmony export */   fetchUserCompanies: () => (/* binding */ fetchUserCompanies),\n/* harmony export */   fetchUserProfiles: () => (/* binding */ fetchUserProfiles),\n/* harmony export */   fetchUsers: () => (/* binding */ fetchUsers),\n/* harmony export */   removeCompanyFromUser: () => (/* binding */ removeCompanyFromUser),\n/* harmony export */   removeProfileFromUser: () => (/* binding */ removeProfileFromUser),\n/* harmony export */   transformApiUserToPortalUser: () => (/* binding */ transformApiUserToPortalUser),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n// Use Next.js API routes as proxy to backend\nconst DATA_API_BASE_URL = \"/api\";\n// Fetch all users from API\nasync function fetchUsers() {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        // Handle both API format variants\n        if (data.users) {\n            // Transform from portal format to User interface format\n            return data.users.map((user)=>{\n                var _user_tenants;\n                return {\n                    user_id: user.id || user.user_id,\n                    username: user.name || user.username || user.full_name,\n                    email: user.email,\n                    full_name: user.name || user.full_name,\n                    status: user.status === 'active' ? 'active' : 'inactive',\n                    created_at: new Date().toISOString(),\n                    companies_count: ((_user_tenants = user.tenants) === null || _user_tenants === void 0 ? void 0 : _user_tenants.length) || 0,\n                    profiles: user.profiles || []\n                };\n            });\n        }\n        return [];\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return [];\n    }\n}\n// Fetch single user by ID\nasync function fetchUser(userId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.user || null;\n    } catch (error) {\n        console.error('Error fetching user:', error);\n        return null;\n    }\n}\n// Fetch all applications\nasync function fetchApplications() {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/applications\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.database_applications || [];\n    } catch (error) {\n        console.error('Error fetching applications:', error);\n        return [];\n    }\n}\n// Create new user\nasync function createUser(userData) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.user || null;\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return null;\n    }\n}\n// Update user\nasync function updateUser(userId, userData) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId), {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.user || null;\n    } catch (error) {\n        console.error('Error updating user:', error);\n        return null;\n    }\n}\n// Delete user\nasync function deleteUser(userId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId), {\n            method: 'DELETE'\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error deleting user:', error);\n        return false;\n    }\n}\n// === NOWE FUNKCJE DLA PROFILI ===\n// Fetch all profiles (optionally filtered by application)\nasync function fetchProfiles(applicationId) {\n    try {\n        const url = applicationId ? \"\".concat(DATA_API_BASE_URL, \"/profiles?application=\").concat(applicationId) : \"\".concat(DATA_API_BASE_URL, \"/profiles\");\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.profiles || [];\n    } catch (error) {\n        console.error('Error fetching profiles:', error);\n        return [];\n    }\n}\n// Fetch single profile with role mappings\nasync function fetchProfile(profileId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/profiles/\").concat(profileId));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.profile || null;\n    } catch (error) {\n        console.error('Error fetching profile:', error);\n        return null;\n    }\n}\n// Fetch companies for user access management\nasync function fetchCompaniesForUsers() {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/companies\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.companies || [];\n    } catch (error) {\n        console.error('Error fetching companies:', error);\n        return [];\n    }\n}\n// Assign profile to user\nasync function assignProfileToUser(userId, profileId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/profiles\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                profile_id: profileId\n            })\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error assigning profile to user:', error);\n        return false;\n    }\n}\n// Remove profile from user\nasync function removeProfileFromUser(userId, profileId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/profiles/\").concat(profileId), {\n            method: 'DELETE'\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error removing profile from user:', error);\n        return false;\n    }\n}\n// Assign company to user\nasync function assignCompanyToUser(userId, companyId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/companies\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                company_id: companyId\n            })\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error assigning company to user:', error);\n        return false;\n    }\n}\n// Remove company from user\nasync function removeCompanyFromUser(userId, companyId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/companies/\").concat(companyId), {\n            method: 'DELETE'\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error removing company from user:', error);\n        return false;\n    }\n}\n// Fetch user's assigned profiles\nasync function fetchUserProfiles(userId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/profiles\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.profiles || [];\n    } catch (error) {\n        console.error('Error fetching user profiles:', error);\n        return [];\n    }\n}\n// Transform API user to Portal user format\nfunction transformApiUserToPortalUser(apiUser, index) {\n    return {\n        id: index + 1,\n        user_id: apiUser.user_id,\n        name: apiUser.full_name,\n        email: apiUser.email,\n        phone: \"-\",\n        companies: apiUser.companies_count || 0,\n        permissions: apiUser.user_id.includes('admin') ? 'Administrator' : 'Użytkownik',\n        profiles: apiUser.profiles || [],\n        status: apiUser.status === 'active'\n    };\n}\n// Fetch user's application access (real data from API)\nasync function fetchUserApplicationAccess(userId) {\n    try {\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/application-access\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        // Przekształć zagnieżdżone dane API na płaską listę\n        const applications = data.applications || [];\n        const flattenedAccess = [];\n        applications.forEach((app)=>{\n            var _app_profiles;\n            (_app_profiles = app.profiles) === null || _app_profiles === void 0 ? void 0 : _app_profiles.forEach((profile)=>{\n                flattenedAccess.push({\n                    user_id: userId,\n                    app_id: app.app_id,\n                    app_name: app.app_name,\n                    profile_id: profile.profile_id,\n                    profile_name: profile.profile_name,\n                    assigned_at: profile.assigned_at,\n                    assigned_by: profile.assigned_by\n                });\n            });\n        });\n        return flattenedAccess;\n    } catch (error) {\n        console.error('Error fetching user application access:', error);\n        throw error;\n    }\n}\n// Delete user application access by profile_id\nasync function deleteUserApplicationAccess(userId, profileId) {\n    try {\n        console.log('Deleting application access:', {\n            userId,\n            profileId\n        });\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/application-access/\").concat(profileId), {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        console.log('Delete response status:', response.status);\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || errorData.detail || 'Failed to delete application access');\n        }\n        const result = await response.json();\n        console.log('Delete success:', result);\n    } catch (error) {\n        console.error('Error deleting user application access:', error);\n        throw error;\n    }\n}\n// Fetch user companies\nasync function fetchUserCompanies(userId) {\n    try {\n        console.log('Fetching user companies for user:', userId);\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/companies\"), {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        console.log('User companies response status:', response.status);\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || errorData.detail || 'Failed to fetch user companies');\n        }\n        const data = await response.json();\n        console.log('User companies fetched:', data);\n        // Map API response to UserCompanyAccess format\n        const companies = data.companies || [];\n        return companies.map((company)=>({\n                company_id: company.company_id,\n                company_name: company.company_name,\n                assigned_date: company.assigned_at,\n                nip: company.nip\n            }));\n    } catch (error) {\n        console.error('Error fetching user companies:', error);\n        throw error;\n    }\n}\n// Delete user company access\nasync function deleteUserCompany(userId, companyId) {\n    try {\n        console.log('Deleting user company access:', {\n            userId,\n            companyId\n        });\n        const response = await fetch(\"\".concat(DATA_API_BASE_URL, \"/users/\").concat(userId, \"/companies/\").concat(companyId), {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        console.log('Delete company response status:', response.status);\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || errorData.detail || 'Failed to delete user company access');\n        }\n        console.log('User company access deleted successfully');\n    } catch (error) {\n        console.error('Error deleting user company access:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/users-api.ts\n"));

/***/ })

});